- We start with source code (a String):
    "10*(3+5) <= 15"
- We pass it to the Lexer, which produces a list of tokens:
    [10, *, (, 3, +, 5, ), <=, 15]
    - roughly speaking, a token is the smallest meaningful unit in the source code
- We then pass the list of tokens to the Parser, which produces an abstract syntax tree (AST):
                    Logical
                   /    |   \
              Binary   <=   Literal:15
             /  |  \
   Literal:10   *  Grouping
                      |
                    Binary
                   /  |  \
           Literal:3  +  Literal:5
    - We have sealed interface Expr permits Logical, Binary, Unary, Literal, Grouping
- We take the AST and pass it to the Interpreter, which evaluates the expression and prints the result: false


print 7 + 1; // print statement, the "7 + 1" is an expression
1 + 2; // expression statement (gets evaluated but not printed)
var a = 1; // var statement
var s1 = "hello";
var s2 = s1 + " world";
print s1; // print statement, "s1" is an expression

s1 <----- a "variable expression", provides the value of s1